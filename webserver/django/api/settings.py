"""
Django settings for api project.

Generated by 'django-admin startproject' using Django 3.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
# import mimetypes
#
# mimetypes.add_type("text/css", ".css", True)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'gpr+ts9e5bp2ith=o9&4e6d4hj8(t)l-4mlzt@!c6hei5!o882'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'false') == 'true'
ALLOW_LOCALHOST = os.environ.get('ALLOW_LOCALHOST', 'false') == 'true'

ALLOWED_HOSTS = ['dorothy', 'dorothy-qa.azurewebsites.net', 'dorothy-image.lps.ufrj.br', '127.0.0.1', '0.0.0.0']
if DEBUG or ALLOW_LOCALHOST:
    ALLOWED_HOSTS.append('localhost')
    ALLOWED_HOSTS.append('host.docker.internal')
    ALLOWED_HOSTS.append('0.0.0.0:8000')
    ALLOWED_HOSTS.append('0.0.0.0')
    ALLOWED_HOSTS.append('127.0.0.1')
    ALLOWED_HOSTS.append('127.0.0.1:8000')
    ALLOWED_HOSTS.append('django')
    ALLOWED_HOSTS.append('django-server')

CSRF_TRUSTED_ORIGINS = [
    'https://*', 'http://*', 'http://*.lps.ufrj.br', 'https://*.lps.ufrj.br'
]
CSRF_COOKIE_SECURE = False
CSRF_COOKIE_DOMAIN = '.lps.ufrj.br'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'image_service',
    'rest_framework',
    'rest_framework.authtoken',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'api.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DB_NAME', 'postgres'),
        'USER': os.environ.get('DB_USER', 'postgres'),
        'PASSWORD': os.environ.get('DB_PASS', 'R2E)5Dqd5ixizrU>+[mR'),
        'HOST': 'db',
        'PORT': '5432',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Brazil/East'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

# This value must match the value for STATIC LOCATION in NGinx config file
STATIC_URL = '/static/'

# This value must match the value for STATIC ALIAS in NGinx config file
STATIC_ROOT = '/var/www/dorothy/static/'

# Defining the base dir where the x-ray images will stay.
# This value must match the value for MEDIA ALIAS in NGinx config file
MEDIA_ROOT = '/imagesrep/'

# Base URL to serve the x-ray images.
# This value must match the value for MEDIA LOCATION in NGinx config file
MEDIA_URL = '/media/'

LOG_LEVEL_SETUP = 'INFO'
LOG_FORMAT_SETUP = 'verbose'
if DEBUG:
    LOG_LEVEL_SETUP = 'DEBUG'
    LOG_FORMAT_SETUP = 'simple'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'level': LOG_LEVEL_SETUP,
            'class': 'logging.StreamHandler',
            'formatter': LOG_FORMAT_SETUP,
        },
    },
    'root': {
        'handlers': ['console'],
        'level': LOG_LEVEL_SETUP,
    },
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
}
